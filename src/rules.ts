/// looks like some pattern here

let rules = [
  // 0. expand triangles

  // 1. dots

  // 2. tides
  "10011101111110011001110111111111011011101111011111110100111101111111111111111111111111111111101111000001111111111110110101011111111111110110011111110011011011111110111111111110111110101110111111111111111101111101110110101011110011111110011111111111101111101111101111110111001111111111101111111110111101101101110101111111111111111110111111111011111011110110111011110101101010101111110110101111110111110111111100110111010111101001101111111111111111111111100111110011111110111111110011011111101111111110101111111111",
  // 3. beach

].map((x) => x.split("").map(Number));

export let getRules = () => {
  let rulesData = new Uint32Array(2 ** 9);
  for (let i = 0; i < 2 ** 9; i++) {
    rulesData[i] = Math.random() < 0.8 ? 1 : 0;
    // rulesData[i] = rules[1][i];
  }

  return rulesData;
};

export let getInitialCells = (width: number, height: number) => {
  let cells = new Uint32Array(width * height);
  for (let i = 0; i < width * height; i++) {
    // cells[i] = Math.random() < 0.5 ? 1 : 0;
    // 400 pixles radius near the center, write 1
    let radius = 10;
    let x = i % width;
    let y = Math.floor(i / width);
    if ((x - width / 2) ** 2 + (y - height / 2) ** 2 < radius ** 2) {
      // random
      // cells[i] = Math.random() < 0.5 ? 1 : 0;
      cells[i] = 1;
    } else {
      cells[i] = 0;
    }
  }

  return cells;
};
