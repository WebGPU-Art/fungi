/// looks like some pattern here

let rules = [
  // 0. lean arrows

  // 1. top down waves

  // 2. triangles

  // 3. rain to trees

  // 4. maybe stable

  // 5. triangle patterns

  // 6. unstable triangle

  // 7. slow growth
  "00011110110110001011111001001101000010101110101011010001110010011000111001110011110100000101101111010001101111100111101000111110011111000100111001001101001010011011111101100000110001111100110101111001011100110001011101010010101101001100001001110110001010111100010010111110001001011011110110011100011110101011110010011110100101001001101010110000111110100011100111101001111111011000111100101001001101100001010110010011000000101111001110000110101110011010011011101100110101101010001011010101110011011000011010001110",
  // 8. clean triangles
  "00101101110110111000010000101011000101000010010110101111110101011000010110011101010100001011110101100110001101001111100100000101000011001100100010000000111011010011101001111010001010110001100010100111010110001001100110111111110100111110110010011110101011100110011101001100000100001000111100110011100001110111101000100110101011000000001011100110001010110000100010000010101001000111011000000011100001101110000000110011010110010111110000111001011110000001010111110111000011111111110111111011110101101111110000101010",
  // 9. village

  // 10. triangles arise

  // 11. sewing

].map((x) => x.split("").map(Number));

export let getRules = () => {
  let rulesData = new Uint32Array(2 ** 9);
  for (let i = 0; i < 2 ** 9; i++) {
    rulesData[i] = Math.random() < 0.5 ? 1 : 0;
    // rulesData[i] = rules[11][i];
    // rulesData[i] = 1;
  }

  return rulesData;
};

export let getInitialCells = (width: number, height: number) => {
  let cells = new Uint32Array(width * height);
  for (let i = 0; i < width * height; i++) {
    cells[i] = Math.random() < 0.5 ? 1 : 0;
    // 400 pixles radius near the center, write 1
    // let radius = 400;
    // let x = i % width;
    // let y = Math.floor(i / width);
    // if ((x - width / 2) ** 2 + (y - height / 2) ** 2 < radius ** 2) {
    //   // random
    //   cells[i] = Math.random() < 0.5 ? 1 : 0;
    // } else {
    //   cells[i] = 0;
    // }
  }

  return cells;
};
